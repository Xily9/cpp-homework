/**
* 函数库实现文件<br/>
* Copyright (c) 2018 Xily.All Rights Reserved.<br/>
* 运行环境建议为Visual Studio 2017<br/>
* 最低要求编译器支持C++11，否则程序将无法运行<br/>
* 注意：该项目必须运行在Windows系统下<br/>
* 该项目在Visual Studio 2017和Mingw gcc on windows 6.3.0(using g++ command with -std=c++11)下编译通过<br/>
* @author 曾宏健 221701423 572089608@qq.com
* @date 2018.6.4
*/

//去除VS的安全警告
#define _CRT_SECURE_NO_WARNINGS
#include "hugeInt.h"
#include "calculate.h"
#include "function.h"
#include <iostream>
#include <iomanip>
#include <conio.h>
#include <string>
#include <windows.h>
#include <ctime>
using namespace std;

/**
* 显示主菜单
*/
void showMainMenu() {
    cout << "Copyright (C) 2018 曾宏健(221701423).All Rights Reserved." << endl << endl;
    showTime();
    drawLine('*', 60);
    cout.setf(ios_base::left, ios_base::adjustfield);
    cout << "*    " << setw(54) << "A：各种运算测试" << "*" << endl
        << "*    " << setw(54) << "B：关系运算符测试" << "*" << endl
        << "*    " << setw(54) << "C：进制转换测试" << "*" << endl
        << "*    " << setw(54) << "D：杂项测试" << "*" << endl
        << "*    " << setw(54) << "Q：退出系统" << "*" << endl;
    drawLine('*', 60);
    cout << "请选择（A,B,C,D,Q）：";
}

/**
* 显示系统当前时间
*/
void showTime() {
    const char* weekday[7] = {"日", "一", "二", "三", "四", "五", "六"};
    tm* timeInfo = getTime(); //获得当前时间
    printf("当前日期、时间：%04d.%02d.%02d(星期%s)  %02d:%02d:%02d\n",
           timeInfo->tm_year + 1900,
           timeInfo->tm_mon + 1,
           timeInfo->tm_mday,
           weekday[timeInfo->tm_wday],
           timeInfo->tm_hour,
           timeInfo->tm_min,
           timeInfo->tm_sec);
}

/**
* 获得存储当前时间的时间结构指针
* @return 时间结构指针
*/
tm* getTime() {
    time_t rawtime;
    time(&rawtime);
    return localtime(&rawtime);
}

/**
* 测试计算
*/
void testCalculate() {
    showCalculateTips();
    while (true) {
        try {
            string s;
            cout << "表达式：";
            cin >> s;
            cout << "计算结果：" << Calculate::calculate(s) << endl;
        } catch (HugeInt::HugeIntException& e) {
            cout << "计算异常：" << e.what() << endl;
        }catch (Calculate::ParseException& e) {
            cout << "解析异常：" << e.what() << endl;
        }catch (exception& e) {
            cout << e.what() << endl;
        }
    }
}

/**
* 显示运算操作说明
*/
void showCalculateTips() {
    drawLine('-', 40);
    cout << "操作说明：" << endl
        << "支持的操作符：+ 加，- 减，* 乘，/ 除 ，% 取余，^ 求幂，！阶乘（必须写右操作数，数字随意）" << endl
        << "支持括号运算，支持负数，支持十六进制与八进制运算（输出结果为十进制数）" << endl
        << "一些简单合法的例子：(5+3)*5 ，-5+3，3-(-5)，5^2+3!0，123*(((5+3)*2)^5)" << endl
        << "Enjoy it!" << endl;
    drawLine('-', 40);
}

/**
 * 测试操作符
 */
void testOperators() {
    int n;
    HugeInt left, right;
    bool result = false;
    while (true) {
        showOperators();
        cout << "请输入上面运算符前的序号：";
        cin >> n;
        cout << "请输入左操作数：";
        cin >> left;
        cout << "请输入右操作数：";
        cin >> right;
        switch (n) {
            case 0:
                result = left < right;
                break;
            case 1:
                result = left <= right;
                break;
            case 2:
                result = left == right;
                break;
            case 3:
                result = left > right;
                break;
            case 4:
                result = left >= right;
                break;
            case 5:
                result = left != right;
                break;
            default:
                break;
        }
        cout << "结果：" << (result ? "true" : "false") << endl;
    }
}

/**
* 显示操作符列表
*/
void showOperators() {
    static const char operators[6][3]{"<", "<=", "==", ">", ">=", "!="};
    drawLine('-', 40);
    for (unsigned i = 0; i < 6; i++) {
        cout << setw(10) << "[" + to_string(i) + "]" + operators[i];
        if (i % 4 == 3) {
            cout << endl;
        }
    }
    cout << endl;
}

/**
 * 测试进制转换
 */
void testSystem() {
    HugeInt hugeInt;
    showSystemMenu();
    const char key = getKey();
    cout << "请输入待转换的数字：(八进制在数字前加0，十六进制在数字前加0X或0x)" << endl;
    cin >> hugeInt;
    cout << "转换结果：";
    switch (key) {
        case 'A':
            cout << hugeInt;
            break;
        case 'B':
            cout << hugeInt.toOct();
            break;
        case 'C':
            cout << hugeInt.toHex();
            break;
        default:
            break;
    }
    cout << endl;
}

/**
 * 显示进制转换菜单
 */
void showSystemMenu() {
    drawLine('*', 60);
    cout.setf(ios_base::left, ios_base::adjustfield);
    cout << "*    " << setw(54) << "A：转十进制" << "*" << endl
        << "*    " << setw(54) << "B：转八进制" << "*" << endl
        << "*    " << setw(54) << "C：转十六进制" << "*" << endl;
    drawLine('*', 60);
    cout << "请选择（A,B,C）：";
}

/**
 * 测试其他功能
 */
void testOthers() {
    const clock_t start = clock();
    try {
        cout << "测试一些构造" << endl;
        TEST(HugeInt(-2147483647L-1)==HugeInt("-2147483648"));
        TEST(HugeInt("-0")==HugeInt(0));
        cout << "测试前后++ --" << endl;
        cout << "HugeInt a = HugeInt(\"1\")" << endl;
        HugeInt a = HugeInt("1");
        TEST(a++ == HugeInt("1"));
        TEST(++a == HugeInt("3"));
        TEST(a-- == HugeInt("3"));
        TEST(--a == HugeInt("1"));
        cout << "测试+= -= *= /= %=" << endl;
        TEST((a += 3) == HugeInt("4"));
        TEST((a -= 3) == HugeInt("1"));
        TEST((a *= 3) == HugeInt("3"));
        TEST((a /= 3) == HugeInt("1"));
        TEST((a %= 3) == HugeInt("1"));
        cout << "测试整型或字符串与巨型整数的计算" << endl;
        TEST(345 + HugeInt("123") == 468);
        TEST(HugeInt(100) + HugeInt(900) == 1000);
        TEST(HugeInt(1000) / 10 == HugeInt(100));
        TEST(HugeInt(1000) - 900 == 100);
        TEST("1000" - HugeInt(900) == 100);
        TEST(HugeInt(900) - "100" == 800);
        TEST(1345678909876532L + HugeInt(382444444444449L) == 1728123354320981L);
        cout << "测试100位以上巨型整数的计算" << endl;
        const HugeInt left(
            "12345678909876543212345678909876543212345678909876543321877777777\
7777777777777488888892311122345678921333333333333338777777777777921333333344\
2347888888888888888888888888888888888888888888888888889100000000000000000477777772111111111114\
1244487777777777777777777777777777777777777777779322222222222222222227124999999999999999999992721\
37182222222222222222222222222222226444444444444444444444237777777777777777777711111111111");
        const HugeInt right(
            "13287777777777777777777777746666666666666666663777777777777777718888888888888124\
21478888888888888888888888888888888888892311111111111111111111111111744444444444444443811111111\
888888888888888888888888888888888888888921738888888888888888888013222222222222222231999999432222222\
42397777777777777777777777778192333333333333333333333044444444444444444444443333333333333333333333\
34287777777777777777777777765555555555555555555551999999999999999999999999999934888888883355555555\
243888888888888888888888889755555555555555555555552999999999999999409999999999999320000000\
24397777777777777");
        cout << "left = " << left << endl;
        cout << "right = " << right << endl;
        TEST(left + right == HugeInt(
            "132877777777777777777777777466666666666666666637777777777777777188\
8888888888812421478888888888888888888888888888888888892311111111111111111111111111744444445679012334\
7987654331234567798765432101234567798765432210766995166666666666666637769021453334456790114453333327\
6555561020175555555699111111122012567081222222222222222222221933333333333333333333332243333333333333\
3333811206549888888888891902226554333333333333333333332977777777777777777932222222215711111111048055\
555524388888888888161026071111197777777777777777777777526444444444444385444444237777709777777802175\
488888888888"
        ));
        TEST(left - right == HugeInt(
            "-13287777777777777777777777746666666666666666663777777777777777718\
8888888888881242147888888888888888888888888888888888889231111111111111111111111111174444444320987655\
2823456790654320997901234567654320997901234556701143961111111111111113999124299110998765433018666666\
09888883464619999999856444444433542989303444444444444444444444155555555555555555555554423333333333333\
33328556510056666666666636533289987777777777777777777774222222222222222220677777777712666666656230555\
5552438888888888961675170666675333333333333333333333307355555555555549655555576222215422222224662006\
6666666666"
        ))
        TEST(left * right == HugeInt(
            "164046637870237311418268859708371745333220849006039785493460134991495208\
4208406521826782452890964515180266567273811555928822801086495250076596678734145519439464356607925305\
4259413454888255713656273879116311424843317600659174905412078117523282791487482138523982747069175961\
70943424749364811828966388984595922844980065610659834104355595543988423803992946030545458566387113056\
64392351260369253536966113548598186753016879544467613716112564977219715851630398397135183973573255840\
49650492894350237236231162638101668498013708152331272036749874966533974885269215771841609916088805409\
10882567203702433174787694658351204845468867120400254343091461258827711077956890251844226409632012001\
51263433094133201182042735220931392780428743583887212442558471899694292199849924386113181773007057874\
27616953018517141801360011340307699031790058382043508017078860204502190188834275073727665105704044444\
95697029144220536324088640338168339752789679024642042222222236300670594957792599152681642220603259259\
256548446913580247"
        ));
        TEST(left / right == HugeInt("0"));
        TEST(right / left == HugeInt(
            "1076310008933373073931734518260094960704175790738735022145711\
272673239267292049220351559873027029415829600550818851091807036961093952919157386276519639451378"
        ));
        TEST(-left == HugeInt(
            "-12345678909876543212345678909876543212345678909876543321877777777\
7777777777777488888892311122345678921333333333333338777777777777921333333344\
2347888888888888888888888888888888888888888888888888889100000000000000000477777772111111111114\
1244487777777777777777777777777777777777777777779322222222222222222227124999999999999999999992721\
37182222222222222222222222222222226444444444444444444444237777777777777777777711111111111"
        ))
        TEST(-right == HugeInt(
            "-13287777777777777777777777746666666666666666663777777777777777718888888888888124\
21478888888888888888888888888888888888892311111111111111111111111111744444444444444443811111111\
888888888888888888888888888888888888888921738888888888888888888013222222222222222231999999432222222\
42397777777777777777777777778192333333333333333333333044444444444444444444443333333333333333333333\
34287777777777777777777777765555555555555555555551999999999999999999999999999934888888883355555555\
243888888888888888888888889755555555555555555555552999999999999999409999999999999320000000\
24397777777777777"
        ))
        TEST(left % right == left);
        TEST(right % left == HugeInt(
            "9452003428940846946550491981736934777476200541478155598937342899\
13009596362818378571911711941771642924120896167493222342179269310866165617063537013513557762964609\
96085717590297451557612888663982665284205379028299797843602996487638011492115851142517404237409341\
537923191130420209024331993687254327626096436864169740660673024869003949734374256279684658799464318\
8389433987597057261527395372392836122981215697409257737716819"
        ))
        TEST(right.toHex() ==
            "0X394F079754071528FC0596459A135A58B6D870E6555C819DE297C14002755568CE\
ED53171E59806B863AABAADF4423457CD8331C9B3FD01B007FC3F885C5E48347D6E485B89143437627DE642566B16AE40DA\
5265FA9AF911F50A99616448C3E1B2FCE42198754BBF9ADFDDA6BE0327F985BED9577346108D6A46F4B3F52CFFCA5A9DEEB\
99958ADA2C94705A2CDB50E3949F05ACA658920DCD400321105EB4B9362D6674D5906E1843FF62616D0DE43E36A3DBC3DB39\
E7CEC30BC6069ECFDE335084E1CD30467D7DC32B6A1C881FACBA65FF11E0C9BC7FDC087E0C054DF45568B22FFD7E2AC50F0\
A20D4F0789C0DC71"
        )
        TEST(left.toOct() ==
            "013330242620234472563133127337551644644651153353676647317036273403207443\
711114316775145125146216022366147305747556050005313101442511554545027632462575266234511173243663727\
502664125771265211543476741040734335702560750530127062262220717373440604527502260661045234104576165\
322063472014654005421571354225622733460121264027703426061626202251551311733001277564205070026656206\
46604126062725247326654455614706605511235414772530776475754161000275561570462476143011575410500707"
        )

    } catch (HugeInt::HugeIntException& e) {
        cout << "计算异常：" << e.what() << endl;
    } catch (exception& e) {
        cout << e.what() << endl;
    }
    const clock_t end = clock();
    cout << "测试完毕，用时" << (double(end - start)) / CLK_TCK << "s" << endl;
}

/**
 * 测试表达式
 * @param x 表达式字符串
 * @param b 表达式正确性
 */
void testExpression(const char* x, bool b) {
    cout << x << "\t";
    if (b) {
        setColor(15, 2);
        cout << " OK ";
    } else {
        setColor(15, 4);
        cout << " FAIL ";
    }
    setColor();
    cout << endl;
}

/**
* 获取并显示输入的字母
* @return 获取到的字母(已转化为大写)
*/
char getKey() {
    const char key = toupper(_getch()); //实时获取输入并转换为大写
    cout << key << endl;                //显示输入的内容
    return key;
}

/**
* 画分割线
* @param c 分割字符
* @param length 字符个数
*/
void drawLine(const char c, const int length) {
    cout << string(length, c) << std::endl;
}

/**
 * 设置颜色
 * @param ForeColor 字体颜色
 * @param BackGroundColor 背景颜色
 */
void setColor(unsigned short ForeColor, unsigned short BackGroundColor) {
    HANDLE handle = GetStdHandle(STD_OUTPUT_HANDLE);               //获取当前窗口句柄
    SetConsoleTextAttribute(handle, ForeColor + BackGroundColor * 0x10); //设置颜色
}
